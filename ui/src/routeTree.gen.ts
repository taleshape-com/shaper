/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as NewRouteImport } from './routes/new'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin.index'
import { Route as WorkflowsIdRouteImport } from './routes/workflows.$id'
import { Route as DashboardsIdRouteImport } from './routes/dashboards.$id'
import { Route as AdminSecurityRouteImport } from './routes/admin.security'
import { Route as AdminKeysRouteImport } from './routes/admin.keys'
import { Route as DashboardsIdEditRouteImport } from './routes/dashboards_.$id.edit'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const NewRoute = NewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const WorkflowsIdRoute = WorkflowsIdRouteImport.update({
  id: '/workflows/$id',
  path: '/workflows/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardsIdRoute = DashboardsIdRouteImport.update({
  id: '/dashboards/$id',
  path: '/dashboards/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminSecurityRoute = AdminSecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => AdminRoute,
} as any)
const AdminKeysRoute = AdminKeysRouteImport.update({
  id: '/keys',
  path: '/keys',
  getParentRoute: () => AdminRoute,
} as any)
const DashboardsIdEditRoute = DashboardsIdEditRouteImport.update({
  id: '/dashboards_/$id/edit',
  path: '/dashboards/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/new': typeof NewRoute
  '/signup': typeof SignupRoute
  '/admin/keys': typeof AdminKeysRoute
  '/admin/security': typeof AdminSecurityRoute
  '/dashboards/$id': typeof DashboardsIdRoute
  '/workflows/$id': typeof WorkflowsIdRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboards/$id/edit': typeof DashboardsIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/new': typeof NewRoute
  '/signup': typeof SignupRoute
  '/admin/keys': typeof AdminKeysRoute
  '/admin/security': typeof AdminSecurityRoute
  '/dashboards/$id': typeof DashboardsIdRoute
  '/workflows/$id': typeof WorkflowsIdRoute
  '/admin': typeof AdminIndexRoute
  '/dashboards/$id/edit': typeof DashboardsIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/new': typeof NewRoute
  '/signup': typeof SignupRoute
  '/admin/keys': typeof AdminKeysRoute
  '/admin/security': typeof AdminSecurityRoute
  '/dashboards/$id': typeof DashboardsIdRoute
  '/workflows/$id': typeof WorkflowsIdRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboards_/$id/edit': typeof DashboardsIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/new'
    | '/signup'
    | '/admin/keys'
    | '/admin/security'
    | '/dashboards/$id'
    | '/workflows/$id'
    | '/admin/'
    | '/dashboards/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/new'
    | '/signup'
    | '/admin/keys'
    | '/admin/security'
    | '/dashboards/$id'
    | '/workflows/$id'
    | '/admin'
    | '/dashboards/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/new'
    | '/signup'
    | '/admin/keys'
    | '/admin/security'
    | '/dashboards/$id'
    | '/workflows/$id'
    | '/admin/'
    | '/dashboards_/$id/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
  NewRoute: typeof NewRoute
  SignupRoute: typeof SignupRoute
  DashboardsIdRoute: typeof DashboardsIdRoute
  WorkflowsIdRoute: typeof WorkflowsIdRoute
  DashboardsIdEditRoute: typeof DashboardsIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/workflows/$id': {
      id: '/workflows/$id'
      path: '/workflows/$id'
      fullPath: '/workflows/$id'
      preLoaderRoute: typeof WorkflowsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboards/$id': {
      id: '/dashboards/$id'
      path: '/dashboards/$id'
      fullPath: '/dashboards/$id'
      preLoaderRoute: typeof DashboardsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/security': {
      id: '/admin/security'
      path: '/security'
      fullPath: '/admin/security'
      preLoaderRoute: typeof AdminSecurityRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/keys': {
      id: '/admin/keys'
      path: '/keys'
      fullPath: '/admin/keys'
      preLoaderRoute: typeof AdminKeysRouteImport
      parentRoute: typeof AdminRoute
    }
    '/dashboards_/$id/edit': {
      id: '/dashboards_/$id/edit'
      path: '/dashboards/$id/edit'
      fullPath: '/dashboards/$id/edit'
      preLoaderRoute: typeof DashboardsIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AdminRouteChildren {
  AdminKeysRoute: typeof AdminKeysRoute
  AdminSecurityRoute: typeof AdminSecurityRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminKeysRoute: AdminKeysRoute,
  AdminSecurityRoute: AdminSecurityRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
  NewRoute: NewRoute,
  SignupRoute: SignupRoute,
  DashboardsIdRoute: DashboardsIdRoute,
  WorkflowsIdRoute: WorkflowsIdRoute,
  DashboardsIdEditRoute: DashboardsIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
