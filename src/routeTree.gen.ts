/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin.index'
import { Route as DashboardsDashboardIdImport } from './routes/dashboards.$dashboardId'
import { Route as DashboardNewImport } from './routes/dashboard.new'
import { Route as AdminUsersImport } from './routes/admin.users'
import { Route as DashboardsDashboardIdEditImport } from './routes/dashboards_.$dashboardId.edit'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const DashboardsDashboardIdRoute = DashboardsDashboardIdImport.update({
  id: '/dashboards/$dashboardId',
  path: '/dashboards/$dashboardId',
  getParentRoute: () => rootRoute,
} as any)

const DashboardNewRoute = DashboardNewImport.update({
  id: '/dashboard/new',
  path: '/dashboard/new',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)

const DashboardsDashboardIdEditRoute = DashboardsDashboardIdEditImport.update({
  id: '/dashboards_/$dashboardId/edit',
  path: '/dashboards/$dashboardId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof AdminImport
    }
    '/dashboard/new': {
      id: '/dashboard/new'
      path: '/dashboard/new'
      fullPath: '/dashboard/new'
      preLoaderRoute: typeof DashboardNewImport
      parentRoute: typeof rootRoute
    }
    '/dashboards/$dashboardId': {
      id: '/dashboards/$dashboardId'
      path: '/dashboards/$dashboardId'
      fullPath: '/dashboards/$dashboardId'
      preLoaderRoute: typeof DashboardsDashboardIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/dashboards_/$dashboardId/edit': {
      id: '/dashboards_/$dashboardId/edit'
      path: '/dashboards/$dashboardId/edit'
      fullPath: '/dashboards/$dashboardId/edit'
      preLoaderRoute: typeof DashboardsDashboardIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/users': typeof AdminUsersRoute
  '/dashboard/new': typeof DashboardNewRoute
  '/dashboards/$dashboardId': typeof DashboardsDashboardIdRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboards/$dashboardId/edit': typeof DashboardsDashboardIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/users': typeof AdminUsersRoute
  '/dashboard/new': typeof DashboardNewRoute
  '/dashboards/$dashboardId': typeof DashboardsDashboardIdRoute
  '/admin': typeof AdminIndexRoute
  '/dashboards/$dashboardId/edit': typeof DashboardsDashboardIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/users': typeof AdminUsersRoute
  '/dashboard/new': typeof DashboardNewRoute
  '/dashboards/$dashboardId': typeof DashboardsDashboardIdRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboards_/$dashboardId/edit': typeof DashboardsDashboardIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/users'
    | '/dashboard/new'
    | '/dashboards/$dashboardId'
    | '/admin/'
    | '/dashboards/$dashboardId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin/users'
    | '/dashboard/new'
    | '/dashboards/$dashboardId'
    | '/admin'
    | '/dashboards/$dashboardId/edit'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/admin/users'
    | '/dashboard/new'
    | '/dashboards/$dashboardId'
    | '/admin/'
    | '/dashboards_/$dashboardId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
  DashboardNewRoute: typeof DashboardNewRoute
  DashboardsDashboardIdRoute: typeof DashboardsDashboardIdRoute
  DashboardsDashboardIdEditRoute: typeof DashboardsDashboardIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
  DashboardNewRoute: DashboardNewRoute,
  DashboardsDashboardIdRoute: DashboardsDashboardIdRoute,
  DashboardsDashboardIdEditRoute: DashboardsDashboardIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/login",
        "/dashboard/new",
        "/dashboards/$dashboardId",
        "/dashboards_/$dashboardId/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/users",
        "/admin/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/admin/users": {
      "filePath": "admin.users.tsx",
      "parent": "/admin"
    },
    "/dashboard/new": {
      "filePath": "dashboard.new.tsx"
    },
    "/dashboards/$dashboardId": {
      "filePath": "dashboards.$dashboardId.tsx"
    },
    "/admin/": {
      "filePath": "admin.index.tsx",
      "parent": "/admin"
    },
    "/dashboards_/$dashboardId/edit": {
      "filePath": "dashboards_.$dashboardId.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
